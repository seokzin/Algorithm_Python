# 다이나믹 프로그래밍의 조건 ex) 점화식, 피보나치
# 1. 최적 부분 구조 - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아 큰 문제를 해결할 수 있다.
# 2. 중복되는 부분 문제 - 동일한 작은 문제를 반복적으로 해결해야 한다.
# 메모이제이션 - 한 번 계산한 결과를 메모리 공간에 메모함. = 캐싱
# 종류 - 탑다운, 바텀업 - 바텀업이 전형적. 결과 저장은 DP 테이블에 저장

# 메모이제이션을 위한 리스트
d = [0] * 100

def fibo(x):
  if x == 1 or x == 2:
    return 1
  if d[x] != 0: # 이미 계산된 결과면 활용
    return d[x]

  d[x] = fibo(x-1) + fibo(x-2)
  return d[x]

print(fibo(99))